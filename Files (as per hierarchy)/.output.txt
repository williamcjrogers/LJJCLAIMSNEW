<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LJJ Claims App - Test</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="src/styles/main.css">
    <link rel="stylesheet" href="src/styles/individualTimeline.css">
    <link rel="stylesheet" href="src/styles/evidenceViewer.css">
    <link rel="stylesheet" href="src/styles/subClaimDetail.css">
    <link rel="stylesheet" href="src/styles/test-page.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="test-header">
        <h1>LJJ Claims Application Test</h1>
        <p>Testing all modules and components</p>
    </div>

    <div class="test-results" id="test-results">
        <div class="test-item test-info">
            <i class="fas fa-spinner fa-spin"></i>
            <span>Running tests...</span>
        </div>
    </div>
    <!-- Main Application Container -->
    <div id="main-app" class="main-app main-app-hidden">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <div class="company-brand">
                    <i class="fas fa-building"></i>
                    <span>Quantum</span>
                </div>
            </div>
            <nav class="sidebar-nav">
                <ul class="nav-menu">
                    <li class="nav-item active" data-section="dashboard">
                        <i class="fas fa-tachometer-alt"></i>
                        <span>Dashboard</span>
                    </li>
                </ul>
            </nav>
        </aside>
        <!-- Main Content -->
        <main class="main-content">
            <header class="content-header">
                <div class="header-left">
                    <div class="breadcrumb">
                        <span class="breadcrumb-item current" id="current-section">Dashboard</span>
                    </div>
                </div>
            </header>
            <section id="dashboard" class="content-section active">
                <div class="section-header">
                    <!-- eslint-disable-next-line -->
                    <h1>Test Dashboard</h1>
                </div>
            </section>
        </main>
    </div>
    <script type="module">
        const results = document.getElementById('test-results');
        const tests = [];
        async function runTests() {
            // Test 1: Check if all data modules load
            try {
                const { caseData } = await import('./src/data/caseData.js');
                const { buildingServicesClaims } = await import('./src/data/buildingServicesClaims.js');
                const { documentsData } = await import('./src/data/documentsData.js');
                const { claimsHierarchy } = await import('./src/data/claimsHierarchy.js');
                tests.push({
                    status: 'success',
                    message: 'All data modules loaded successfully',
                    details: `Loaded: caseData, buildingServicesClaims, documentsData, claimsHierarchy`
                });
            } catch (error) {
                tests.push({
                    status: 'error',
                    message: 'Data module loading failed',
                    details: error.message
                });
            }
            // Test 2: Check component modules
            try {
                const { Sidebar } = await import('./src/components/Sidebar.js');
                tests.push({
                    status: 'success',
                    message: 'Component modules loaded',
                    details: 'Sidebar component loaded'
                });
            } catch (error) {
                tests.push({
                    status: 'error',
                    message: 'Component loading failed',
                    details: error.message
                });
            }
            // Test 3: Check main modules
            try {
                const { Dashboard } = await import('./src/modules/Dashboard.js');
                const { MasterDashboard } = await import('./src/modules/MasterDashboard_clean.js');
                const { HeadOfClaimView } = await import('./src/modules/HeadOfClaimView.js');
                const { SubClaimDetailView } = await import('./src/modules/SubClaimDetailView.js');
                tests.push({
                    status: 'success',
                    message: 'Main modules loaded',
                    details: 'Dashboard, MasterDashboard, HeadOfClaimView, SubClaimDetailView'
                });
            } catch (error) {
                tests.push({
                    status: 'error',
                    message: 'Main module loading failed',
                    details: error.message
                });
            }
            // Test 4: Check lazy-loaded modules
            try {
                const { Timeline } = await import('./src/modules/Timeline.js');
                const { Evidence } = await import('./src/modules/Evidence.js');
                const { Strategy } = await import('./src/modules/Strategy.js');
                const { Analytics } = await import('./src/modules/Analytics.js');
                const { Collaboration } = await import('./src/modules/Collaboration.js');
                const { AIQuery } = await import('./src/modules/AIQuery.js');
                const { AIInsights } = await import('./src/modules/AIInsights.js');
                tests.push({
                    status: 'success',
                    message: 'All lazy-loaded modules ready',
                    details: 'Timeline, Evidence, Strategy, Analytics, Collaboration, AIQuery, AIInsights'
                });
            } catch (error) {
                tests.push({
                    status: 'error',
                    message: 'Lazy module loading failed',
                    details: error.message
                });
            }
            // Test 5: Check if Chart.js is available
            if (typeof Chart !== 'undefined') {
                tests.push({
                    status: 'success',
                    message: 'Chart.js loaded',
                    details: 'Chart.js library available globally'
                });
            } else {
                tests.push({
                    status: 'warning',
                    message: 'Chart.js not loaded',
                    details: 'Charts may not render properly'
                });
            }
            // Test 6: Try to initialize the app
            try {
                const ClaimManagementApp = (await import('./src/main.js')).default;
                const app = new ClaimManagementApp();
                tests.push({
                    status: 'success',
                    message: 'Application initialized successfully',
                    details: 'ClaimManagementApp instance created'
                });
                // Show the app
                document.getElementById('main-app').classList.remove('main-app-hidden');
                tests.push({
                    status: 'info',
                    message: 'Application is now running',
                    details: 'Check below for the rendered application'
                });
            } catch (error) {
                tests.push({
                    status: 'error',
                    message: 'Application initialization failed',
                    details: error.message
                });
            }
            // Display test results
            displayResults();
        }
        function displayResults() {
            results.innerHTML = tests.map(test => {
                const icon = {
                    success: 'check-circle',
                    error: 'times-circle',
                    warning: 'exclamation-triangle',
                    info: 'info-circle'
                }[test.status];
                return `
                    <div class="test-item test-${test.status}">
                        <i class="fas fa-${icon}"></i>
                        <div>
                            <strong>${test.message}</strong>
                            ${test.details ? `<br><small>${test.details}</small>` : ''}
                        </div>
                    </div>
                `;
            }).join('');
            // Summary
            const successCount = tests.filter(t => t.status === 'success').length;
            const errorCount = tests.filter(t => t.status === 'error').length;
            results.innerHTML = `
                <div class="test-item test-${errorCount === 0 ? 'success' : 'error'}">
                    <i class="fas fa-${errorCount === 0 ? 'check-circle' : 'exclamation-triangle'}"></i>
                    <strong>Test Summary: ${successCount}/${tests.length} tests passed</strong>
                </div>
            ` + results.innerHTML;
        }
        // Run tests
        runTests();
    </script>
</body>
</html>